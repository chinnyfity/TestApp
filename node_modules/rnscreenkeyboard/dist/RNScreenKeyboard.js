import React from "react";
import { View, StyleSheet, Text, TouchableOpacity, Image, Platform, } from "react-native";
const rows = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
];
const RNScreenKeyboard = ({ value, onKeyPress, textStyle, cellStyle, rowStyle, BackSpaceComponent, lastRowStyle, Left, Right, Center, backspaceTint, }) => {
    const handleKeyPress = (key) => {
        onKeyPress((value += key));
    };
    const handleBackSpace = () => {
        onKeyPress(value.toString().substring(0, value.toString().length - 1));
    };
    const handleClear = () => {
        onKeyPress("");
    };
    return (React.createElement(View, { style: styles.container },
        rows.map((row, index) => {
            return (React.createElement(Row, { textStyle: textStyle, cellStyle: cellStyle, rowStyle: rowStyle, onKeyPress: handleKeyPress, key: index, chars: row }));
        }),
        React.createElement(LastRow, { cellStyle: cellStyle, textStyle: textStyle, BackSpaceComponent: BackSpaceComponent, onKeyPress: handleKeyPress, onBackSpace: handleBackSpace, onLongBackSpace: handleClear, lastRowStyle: lastRowStyle, Left: Left, Right: Right, Center: Center, backspaceTint: backspaceTint })));
};
const styles = StyleSheet.create({
    container: {},
    row: {
        display: "flex",
        flexDirection: "row",
        justifyContent: "center",
        alignItems: "stretch",
    },
    cell: {
        padding: 10,
        alignSelf: "stretch",
        minHeight: 50,
        minWidth: 50,
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
    },
    text: {
        fontSize: 20,
        color: "white",
    },
    backspace: {
        resizeMode: Platform.OS === "android" ? "center" : "contain",
        width: 20,
        height: 20,
    },
});
const LastRow = ({ Left, Right, Center, onKeyPress, onBackSpace, BackSpaceComponent, textStyle, cellStyle, onLongBackSpace, lastRowStyle, backspaceTint, }) => (React.createElement(View, { style: [styles.row, lastRowStyle] },
    Left ? (Left) : (React.createElement(TouchableOpacity, { onPress: () => onKeyPress(".") },
        React.createElement(View, { style: [styles.cell, cellStyle] },
            React.createElement(Text, { style: [styles.text, textStyle] }, ".")))),
    Center ? (Center) : (React.createElement(TouchableOpacity, { onPress: () => onKeyPress("0") },
        React.createElement(View, { style: [styles.cell, cellStyle] },
            React.createElement(Text, { style: [styles.text, textStyle] }, "0")))),
    Right ? (Right) : (React.createElement(TouchableOpacity, { onLongPress: onLongBackSpace, onPress: onBackSpace }, BackSpaceComponent ? (React.createElement(View, { style: [styles.cell, cellStyle] }, BackSpaceComponent)) : (React.createElement(View, { style: [styles.cell, cellStyle] },
        React.createElement(Image, { resizeMode: Platform.OS === "android" ? "center" : "contain", style: [
                styles.backspace,
                {
                    tintColor: backspaceTint ? backspaceTint : "black",
                },
            ], source: require("./backspace.png") })))))));
const Row = ({ chars, rowStyle, onKeyPress, cellStyle, textStyle, }) => (React.createElement(View, { style: [styles.row, rowStyle] }, chars.map((char, index) => {
    return (React.createElement(Cell, { key: index, textStyle: textStyle, cellStyle: cellStyle, onKeyPress: onKeyPress, char: char }));
})));
const Cell = ({ char, onPress, textStyle, cellStyle, onKeyPress, }) => (React.createElement(TouchableOpacity, { onPress: () => onKeyPress(`${char}`) },
    React.createElement(View, { style: [styles.cell, cellStyle] },
        React.createElement(Text, { style: [styles.text, textStyle] }, `${char}`))));
export default RNScreenKeyboard;
